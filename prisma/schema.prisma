// The House Plant Store Database Schema
generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User Management
enum UserRole {
  CUSTOMER
  SUPER_ADMIN
  PLANT_MANAGER
  ORDER_MANAGER
  VIEWER
}

model User {
  id                  String    @id @default(cuid())
  name                String?
  email               String    @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  role                UserRole  @default(CUSTOMER)
  newsletterSubscribed Boolean  @default(false)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relations
  accounts     Account[]
  sessions     Session[]
  orders       Order[]
  reviews      Review[]
  cartItems    CartItem[]
  addresses    Address[]
}

// Address Management for SA Provinces
enum Province {
  GAUTENG
  WESTERN_CAPE
  KWAZULU_NATAL
  EASTERN_CAPE
  LIMPOPO
  MPUMALANGA
  NORTH_WEST
  NORTHERN_CAPE
  FREE_STATE
}

model Address {
  id           String    @id @default(cuid())
  userId       String
  firstName    String
  lastName     String
  company      String?
  vatNumber    String?
  addressLine1 String
  addressLine2 String?
  city         String
  province     Province
  postalCode   String
  phone        String
  isDefault    Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]
}

// Product Management
enum CareLevel {
  EASY
  MODERATE
  ADVANCED
}

enum LightRequirement {
  LOW
  MEDIUM
  BRIGHT
  DIRECT_SUN
}

enum WateringFrequency {
  WEEKLY
  BI_WEEKLY
  MONTHLY
}

enum PlantSize {
  SMALL
  MEDIUM
  LARGE
}

enum GrowthRate {
  SLOW
  MODERATE
  FAST
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  parentId    String?
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  parent   Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]
}

model Product {
  id                String             @id @default(cuid())
  name              String
  slug              String             @unique
  description       String?
  shortDescription  String?
  price             Decimal            @db.Decimal(10, 2)
  compareAtPrice    Decimal?           @db.Decimal(10, 2)
  sku               String?            @unique
  stockQuantity     Int                @default(0)
  lowStockThreshold Int                @default(10)
  weight            Decimal?           @db.Decimal(8, 2)
  dimensions        String?
  isActive          Boolean            @default(true)
  isFeatured        Boolean            @default(false)
  sortOrder         Int                @default(0)
  
  // Plant-specific fields
  careLevel         CareLevel?
  lightRequirement  LightRequirement?
  wateringFrequency WateringFrequency?
  isPetSafe         Boolean?
  plantSize         PlantSize?
  growthRate        GrowthRate?
  careInstructions  String?
  
  // SEO
  metaTitle         String?
  metaDescription   String?
  
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  // Relations
  categoryId   String
  category     Category       @relation(fields: [categoryId], references: [id])
  images       ProductImage[]
  reviews      Review[]
  orderItems   OrderItem[]
  cartItems    CartItem[]
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  url       String
  altText   String?
  sortOrder Int     @default(0)
  isPrimary Boolean @default(false)

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

// Shopping Cart
model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

// Order Management
enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  YOCO
  EFT
  PAYJUSTNOW
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum ShippingMethod {
  STANDARD
  COLLECTION_JHB
}

model Order {
  id              String         @id @default(cuid())
  orderNumber     String         @unique
  userId          String
  status          OrderStatus    @default(PENDING)
  paymentMethod   PaymentMethod?
  paymentStatus   PaymentStatus  @default(PENDING)
  shippingMethod  ShippingMethod @default(STANDARD)
  
  // Totals
  subtotal        Decimal        @db.Decimal(10, 2)
  shippingCost    Decimal        @default(0) @db.Decimal(10, 2)
  taxAmount       Decimal        @default(0) @db.Decimal(10, 2)
  discountAmount  Decimal        @default(0) @db.Decimal(10, 2)
  totalAmount     Decimal        @db.Decimal(10, 2)
  
  // Shipping Information
  shippingAddressId String?
  trackingNumber    String?
  shippedAt         DateTime?
  deliveredAt       DateTime?
  
  // Payment Information
  paymentReference  String?
  paidAt            DateTime?
  
  // Notes
  customerNotes     String?
  adminNotes        String?
  
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  // Relations
  user            User       @relation(fields: [userId], references: [id])
  shippingAddress Address?   @relation(fields: [shippingAddressId], references: [id])
  items           OrderItem[]
}

model OrderItem {
  id          String  @id @default(cuid())
  orderId     String
  productId   String
  quantity    Int
  price       Decimal @db.Decimal(10, 2)
  totalPrice  Decimal @db.Decimal(10, 2)
  
  // Snapshot of product details at time of order
  productName String
  productSku  String?

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

// Reviews System
model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int      // 1-5 stars
  title     String?
  comment   String?
  isVerified Boolean @default(false)
  isApproved Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

// Shipping Rates by Province
model ShippingRate {
  id        String   @id @default(cuid())
  province  Province @unique
  rate      Decimal  @db.Decimal(8, 2)
  freeThreshold Decimal? @db.Decimal(10, 2) // Free shipping threshold
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Contact Forms
model ContactForm {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  status    String   @default("NEW") // NEW, REPLIED, CLOSED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
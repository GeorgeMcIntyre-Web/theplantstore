generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                    String            @id @default(cuid())
  name                  String?
  email                 String            @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole          @default(CUSTOMER)
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  newsletterSubscribed  Boolean           @default(false)
  isActive              Boolean           @default(true)
  accounts              Account[]
  addresses             Address[]
  cartItems             CartItem[]
  requestedExpenses     Expense[]         @relation("ExpenseRequester")
  expenseApprovals      ExpenseApproval[]
  auditLogs             ExpenseAuditLog[]
  notificationsAssigned Notification[]    @relation("NotificationAssignee")
  notifications         Notification[]
  orders                Order[]
  purchaseOrders        PurchaseOrder[]   @relation("AdminPurchaseOrders")
  reviews               Review[]
  sessions              Session[]
  shrinkageRecords      Shrinkage[]
}

model Address {
  id           String   @id @default(cuid())
  userId       String
  firstName    String
  lastName     String
  company      String?
  vatNumber    String?
  addressLine1 String
  addressLine2 String?
  city         String
  province     Province
  postalCode   String
  phone        String
  isDefault    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders       Order[]
}

model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  slug        String     @unique
  description String?
  image       String?
  parentId    String?
  isActive    Boolean    @default(true)
  sortOrder   Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]
}

model Product {
  id                String             @id @default(cuid())
  name              String
  slug              String             @unique
  description       String?
  shortDescription  String?
  price             Decimal            @db.Decimal(10, 2)
  compareAtPrice    Decimal?           @db.Decimal(10, 2)
  sku               String?            @unique
  stockQuantity     Int                @default(0)
  lowStockThreshold Int                @default(10)
  weight            Decimal?           @db.Decimal(8, 2)
  dimensions        String?
  isActive          Boolean            @default(true)
  isFeatured        Boolean            @default(false)
  sortOrder         Int                @default(0)
  careLevel         CareLevel?
  lightRequirement  LightRequirement?
  wateringFrequency WateringFrequency?
  isPetSafe         Boolean?
  plantSize         PlantSize?
  growthRate        GrowthRate?
  careInstructions  String?
  metaTitle         String?
  metaDescription   String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  categoryId        String?
  supplierId        String?
  cartItems         CartItem[]
  orderItems        OrderItem[]
  category          Category?          @relation(fields: [categoryId], references: [id])
  supplier          Supplier?          @relation(fields: [supplierId], references: [id])
  productCosts      ProductCost[]
  images            ProductImage[]
  reviews           Review[]
  shrinkageRecords  Shrinkage[]
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  url       String
  altText   String?
  sortOrder Int     @default(0)
  isPrimary Boolean @default(false)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Order {
  id                String         @id @default(cuid())
  orderNumber       String         @unique
  userId            String
  status            OrderStatus    @default(PENDING)
  paymentMethod     PaymentMethod?
  paymentStatus     PaymentStatus  @default(PENDING)
  shippingMethod    ShippingMethod @default(STANDARD)
  subtotal          Decimal        @db.Decimal(10, 2)
  shippingCost      Decimal        @default(0) @db.Decimal(10, 2)
  taxAmount         Decimal        @default(0) @db.Decimal(10, 2)
  discountAmount    Decimal        @default(0) @db.Decimal(10, 2)
  totalAmount       Decimal        @db.Decimal(10, 2)
  shippingAddressId String?
  trackingNumber    String?
  shippedAt         DateTime?
  deliveredAt       DateTime?
  paymentReference  String?
  paidAt            DateTime?
  customerNotes     String?
  adminNotes        String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  vatAmount         Decimal        @default(0) @db.Decimal(10, 2)
  vatRate           Decimal        @default(15) @db.Decimal(5, 2)
  shippingAddress   Address?       @relation(fields: [shippingAddressId], references: [id])
  user              User           @relation(fields: [userId], references: [id])
  items             OrderItem[]
}

model OrderItem {
  id          String  @id @default(cuid())
  orderId     String
  productId   String
  quantity    Int
  price       Decimal @db.Decimal(10, 2)
  totalPrice  Decimal @db.Decimal(10, 2)
  productName String
  productSku  String?
  costPrice   Decimal @db.Decimal(10, 2)
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Review {
  id         String   @id @default(cuid())
  userId     String
  productId  String
  rating     Int
  title      String?
  comment    String?
  isVerified Boolean  @default(false)
  isApproved Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Notification {
  id         String   @id @default(cuid())
  userId     String
  type       String
  message    String
  link       String?
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  assignedTo String?
  status     String   @default("pending")
  assignee   User?    @relation("NotificationAssignee", fields: [assignedTo], references: [id])
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Supplier {
  id             String          @id @default(cuid())
  name           String          @unique
  email          String?
  phone          String?
  address        String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  products       Product[]
  purchaseOrders PurchaseOrder[]
}

model PurchaseOrder {
  id          String   @id @default(cuid())
  orderNumber String   @unique
  status      String
  adminId     String
  supplierId  String
  items       Json
  total       Decimal  @db.Decimal(10, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  admin       User     @relation("AdminPurchaseOrders", fields: [adminId], references: [id])
  supplier    Supplier @relation(fields: [supplierId], references: [id])
}

model ShippingRate {
  id            String   @id @default(cuid())
  province      Province @unique
  rate          Decimal  @db.Decimal(8, 2)
  freeThreshold Decimal? @db.Decimal(10, 2)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ContactForm {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  status    String   @default("NEW")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Shrinkage {
  id               String   @id @default(cuid())
  productId        String
  quantity         Int
  reason           String
  notes            String?
  recordedById     String
  costAtTimeOfLoss Decimal  @db.Decimal(10, 2)
  recordedAt       DateTime @default(now())
  journalEntryId   String?
  product          Product  @relation(fields: [productId], references: [id])
  recordedBy       User     @relation(fields: [recordedById], references: [id])
}

model ExpenseCategory {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  expenses    Expense[]
}

model Expense {
  id             String            @id @default(cuid())
  description    String
  amount         Decimal           @db.Decimal(10, 2)
  expenseDate    DateTime
  categoryId     String
  vendorName     String?
  receiptUrl     String?
  notes          String?
  vatAmount      Decimal?          @db.Decimal(10, 2)
  vatRate        Decimal?          @default(15) @db.Decimal(5, 2)
  status         ExpenseStatus     @default(DRAFT)
  requestedById  String
  journalEntryId String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  category       ExpenseCategory   @relation(fields: [categoryId], references: [id])
  requester      User              @relation("ExpenseRequester", fields: [requestedById], references: [id])
  approval       ExpenseApproval[]
  auditLogs      ExpenseAuditLog[]
}

model ExpenseApproval {
  id         String   @id @default(cuid())
  expenseId  String
  approverId String
  status     String
  comments   String?
  approvedAt DateTime @default(now())
  approver   User     @relation(fields: [approverId], references: [id])
  expense    Expense  @relation(fields: [expenseId], references: [id], onDelete: Cascade)
}

model ProductCost {
  id            String   @id @default(cuid())
  productId     String
  costPrice     Decimal  @db.Decimal(10, 2)
  effectiveDate DateTime
  supplierName  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model FinancialYear {
  id        String   @id @default(cuid())
  yearName  String   @unique
  startDate DateTime
  endDate   DateTime
  isClosed  Boolean  @default(false)
}

model TaxPeriod {
  id        String     @id @default(cuid())
  name      String
  startDate DateTime
  endDate   DateTime
  isClosed  Boolean    @default(false)
  vatReturn VatReturn?
}

model VatReturn {
  id            String    @id @default(cuid())
  taxPeriodId   String    @unique
  totalSales    Decimal   @db.Decimal(12, 2)
  outputVat     Decimal   @db.Decimal(10, 2)
  totalExpenses Decimal   @db.Decimal(12, 2)
  inputVat      Decimal   @db.Decimal(10, 2)
  netVatPayable Decimal   @db.Decimal(10, 2)
  status        String    @default("DRAFT")
  submittedAt   DateTime?
  createdAt     DateTime  @default(now())
  taxPeriod     TaxPeriod @relation(fields: [taxPeriodId], references: [id])
}

model ChartOfAccounts {
  id           String        @id @default(cuid())
  accountCode  String        @unique
  accountName  String
  accountType  String
  description  String?
  isActive     Boolean       @default(true)
  journalLines JournalLine[]
}

model JournalEntry {
  id            String        @id @default(cuid())
  entryDate     DateTime
  description   String
  referenceId   String
  referenceType String
  isPosted      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  journalLines  JournalLine[]
}

model JournalLine {
  id             String          @id @default(cuid())
  journalEntryId String
  accountId      String
  debitAmount    Decimal         @default(0) @db.Decimal(12, 2)
  creditAmount   Decimal         @default(0) @db.Decimal(12, 2)
  account        ChartOfAccounts @relation(fields: [accountId], references: [id])
  journalEntry   JournalEntry    @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)
}

model ExpenseAuditLog {
  id        String   @id @default(cuid())
  expenseId String
  userId    String
  action    String
  before    Json?
  after     Json?
  createdAt DateTime @default(now())
  expense   Expense  @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
}

enum UserRole {
  CUSTOMER
  SUPER_ADMIN
  PLANT_MANAGER
  ORDER_MANAGER
  VIEWER
  FINANCIAL_MANAGER
  ACCOUNTANT
}

enum Province {
  GAUTENG
  WESTERN_CAPE
  KWAZULU_NATAL
  EASTERN_CAPE
  LIMPOPO
  MPUMALANGA
  NORTH_WEST
  NORTHERN_CAPE
  FREE_STATE
}

enum CareLevel {
  EASY
  MODERATE
  ADVANCED
}

enum LightRequirement {
  LOW
  MEDIUM
  BRIGHT
  DIRECT_SUN
}

enum WateringFrequency {
  WEEKLY
  BI_WEEKLY
  MONTHLY
}

enum PlantSize {
  SMALL
  MEDIUM
  LARGE
}

enum GrowthRate {
  SLOW
  MODERATE
  FAST
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  YOCO
  EFT
  PAYJUSTNOW
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum ShippingMethod {
  STANDARD
  COLLECTION_JHB
}

enum ExpenseStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  REJECTED
  PAID
}

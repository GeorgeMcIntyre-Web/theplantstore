// The House Plant Store Database Schema
generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User Management
enum UserRole {
  CUSTOMER
  SUPER_ADMIN
  PLANT_MANAGER
  ORDER_MANAGER
  FINANCIAL_MANAGER // Can approve expenses, has full accounting access
  ACCOUNTANT        // Can manage expenses, run reports, cannot approve
  VIEWER
}

model User {
  id                  String    @id @default(cuid())
  name                String?
  email               String    @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  role                UserRole  @default(CUSTOMER)
  newsletterSubscribed Boolean  @default(false)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  isActive            Boolean   @default(true)

  // Relations
  accounts     Account[]
  sessions     Session[]
  orders       Order[]
  reviews      Review[]
  cartItems    CartItem[]
  addresses    Address[]
  notifications Notification[]
  purchaseOrders PurchaseOrder[] @relation("AdminPurchaseOrders")
  notificationsAssigned Notification[] @relation("NotificationAssignee")
  
  // Accounting Relations
  expenses         Expense[]
  expenseApprovals ExpenseApproval[]
  shrinkageRecords Shrinkage[]
}

// Address Management for SA Provinces
enum Province {
  GAUTENG
  WESTERN_CAPE
  KWAZULU_NATAL
  EASTERN_CAPE
  LIMPOPO
  MPUMALANGA
  NORTH_WEST
  NORTHERN_CAPE
  FREE_STATE
}

model Address {
  id           String    @id @default(cuid())
  userId       String
  firstName    String
  lastName     String
  company      String?
  vatNumber    String?
  addressLine1 String
  addressLine2 String?
  city         String
  province     Province
  postalCode   String
  phone        String
  isDefault    Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]
}

// Product Management
enum CareLevel {
  EASY
  MODERATE
  ADVANCED
}

enum LightRequirement {
  LOW
  MEDIUM
  BRIGHT
  DIRECT_SUN
}

enum WateringFrequency {
  WEEKLY
  BI_WEEKLY
  MONTHLY
}

enum PlantSize {
  SMALL
  MEDIUM
  LARGE
}

enum GrowthRate {
  SLOW
  MODERATE
  FAST
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  parentId    String?
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  parent   Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]
}

model Product {
  id                String             @id @default(cuid())
  name              String
  slug              String             @unique
  description       String?
  shortDescription  String?
  price             Decimal            @db.Decimal(10, 2)
  compareAtPrice    Decimal?           @db.Decimal(10, 2)
  sku               String?            @unique
  stockQuantity     Int                @default(0)
  lowStockThreshold Int                @default(10)
  weight            Decimal?           @db.Decimal(8, 2)
  dimensions        String?
  isActive          Boolean            @default(true)
  isFeatured        Boolean            @default(false)
  sortOrder         Int                @default(0)
  
  // Plant-specific fields
  careLevel         CareLevel?
  lightRequirement  LightRequirement?
  wateringFrequency WateringFrequency?
  isPetSafe         Boolean?
  plantSize         PlantSize?
  growthRate        GrowthRate?
  careInstructions  String?
  
  // SEO
  metaTitle         String?
  metaDescription   String?
  
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  // Relations
  category      Category?      @relation(fields: [categoryId], references: [id])
  categoryId    String?
  supplier      Supplier?      @relation(fields: [supplierId], references: [id])
  supplierId    String?
  images        ProductImage[]
  cartItems     CartItem[]
  orderItems    OrderItem[]
  reviews       Review[]
  
  // Accounting Relations
  productCosts  ProductCost[]
  shrinkageRecords Shrinkage[]
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  url       String
  altText   String?
  sortOrder Int     @default(0)
  isPrimary Boolean @default(false)

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

// Shopping Cart
model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

// Order Management
enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  YOCO
  EFT
  PAYJUSTNOW
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum ShippingMethod {
  STANDARD
  COLLECTION_JHB
}

model Order {
  id              String         @id @default(cuid())
  orderNumber     String         @unique
  userId          String
  status          OrderStatus    @default(PENDING)
  paymentMethod   PaymentMethod?
  paymentStatus   PaymentStatus  @default(PENDING)
  shippingMethod  ShippingMethod @default(STANDARD)
  
  // Totals
  subtotal        Decimal        @db.Decimal(10, 2)
  shippingCost    Decimal        @default(0) @db.Decimal(10, 2)
  taxAmount       Decimal        @default(0) @db.Decimal(10, 2)
  discountAmount  Decimal        @default(0) @db.Decimal(10, 2)
  totalAmount     Decimal        @db.Decimal(10, 2)
  
  // VAT Details
  vatAmount       Decimal        @default(0) @db.Decimal(10, 2)
  vatRate         Decimal        @default(15) @db.Decimal(5, 2)
  
  // Shipping Information
  shippingAddressId String?
  trackingNumber    String?
  shippedAt         DateTime?
  deliveredAt       DateTime?
  
  // Payment Information
  paymentReference  String?
  paidAt            DateTime?
  
  // Notes
  customerNotes     String?
  adminNotes        String?
  
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  // Relations
  user            User       @relation(fields: [userId], references: [id])
  shippingAddress Address?   @relation(fields: [shippingAddressId], references: [id])
  items           OrderItem[]
}

model OrderItem {
  id          String  @id @default(cuid())
  orderId     String
  productId   String
  quantity    Int
  price       Decimal @db.Decimal(10, 2)
  totalPrice  Decimal @db.Decimal(10, 2)
  
  // CRITICAL ADDITION: Snapshot of cost at time of sale for accurate COGS
  costPrice   Decimal @db.Decimal(10, 2)
  
  // Snapshot of product details at time of order
  productName String
  productSku  String?

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

// Reviews System
model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int      // 1-5 stars
  title     String?
  comment   String?
  isVerified Boolean @default(false)
  isApproved Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Notification {
  id         String   @id @default(cuid())
  userId     String
  type       String   // e.g., "order", "po-draft", "low-stock"
  message    String
  link       String?
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignedTo String?
  assignee   User?    @relation("NotificationAssignee", fields: [assignedTo], references: [id])
  status     String   @default("pending") // e.g., 'pending', 'in_progress', 'completed'
}

model Supplier {
  id        String   @id @default(cuid())
  name      String   @unique
  email     String?
  phone     String?
  address   String?
  products  Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  purchaseOrders PurchaseOrder[]
}

model PurchaseOrder {
  id         String   @id @default(cuid())
  orderNumber String  @unique
  status     String   // e.g., 'DRAFT', 'APPROVED', 'SENT'
  adminId    String
  supplierId String
  items      Json     // [{ productId, name, quantity, price }]
  total      Decimal  @db.Decimal(10,2)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  admin      User     @relation("AdminPurchaseOrders", fields: [adminId], references: [id])
  supplier   Supplier @relation(fields: [supplierId], references: [id])
}

// Shipping Rates by Province
model ShippingRate {
  id        String   @id @default(cuid())
  province  Province @unique
  rate      Decimal  @db.Decimal(8, 2)
  freeThreshold Decimal? @db.Decimal(10, 2) // Free shipping threshold
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Contact Forms
model ContactForm {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  status    String   @default("NEW") // NEW, REPLIED, CLOSED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ===================================
// NEW & FINALIZED ACCOUNTING TABLES
// ===================================

// For plant mortality and loss
model Shrinkage {
  id                String   @id @default(cuid())
  productId         String
  product           Product  @relation(fields: [productId], references: [id])
  quantity          Int
  reason            String // e.g., "Pest Damage", "Died in transit", "Natural Loss"
  notes             String?
  recordedById      String
  recordedBy        User     @relation(fields: [recordedById], references: [id])
  costAtTimeOfLoss  Decimal  @db.Decimal(10, 2)
  recordedAt        DateTime @default(now())
  journalEntryId    String?  // Link to the financial transaction
}

// Expense Categories
model ExpenseCategory {
  id          String            @id @default(cuid())
  name        String            @unique
  description String?
  isActive    Boolean           @default(true)
  expenses    Expense[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

// Expense Management with Approval Workflow
enum ExpenseStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  REJECTED
  PAID
}

model Expense {
  id              String          @id @default(cuid())
  description     String
  amount          Decimal         @db.Decimal(10, 2) // Amount INCLUDING VAT
  expenseDate     DateTime
  categoryId      String
  category        ExpenseCategory @relation(fields: [categoryId], references: [id])
  vendorName      String?
  receiptUrl      String?
  notes           String?
  
  // VAT Details
  vatAmount       Decimal?        @db.Decimal(10, 2) // Calculated from total amount
  vatRate         Decimal?        @db.Decimal(5, 2)  @default(15)

  // Approval Workflow
  status          ExpenseStatus   @default(DRAFT)
  requestedById   String
  requestedBy     User            @relation(fields: [requestedById], references: [id])
  approvals       ExpenseApproval[]
  
  // Financial Links
  journalEntryId  String?

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model ExpenseApproval {
  id          String   @id @default(cuid())
  expenseId   String
  expense     Expense  @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  approverId  String
  approver    User     @relation(fields: [approverId], references: [id])
  status      String   // APPROVED, REJECTED
  comments    String?
  approvedAt  DateTime @default(now())
}

// Product Costing (for COGS)
model ProductCost {
  id            String   @id @default(cuid())
  productId     String
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  costPrice     Decimal  @db.Decimal(10, 2)
  effectiveDate DateTime
  supplierName  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Tax & Financial Periods
model FinancialYear {
  id        String   @id @default(cuid())
  yearName  String   @unique // "2025/2026"
  startDate DateTime // e.g., 2025-03-01T00:00:00.000Z
  endDate   DateTime // e.g., 2026-02-28T23:59:59.999Z
  isClosed  Boolean  @default(false)
}

model TaxPeriod {
  id        String     @id @default(cuid())
  name      String     // "VAT Period: Mar/Apr 2025"
  startDate DateTime
  endDate   DateTime
  vatReturn VatReturn?
  isClosed  Boolean    @default(false)
}

model VatReturn {
  id             String    @id @default(cuid())
  taxPeriodId    String    @unique
  taxPeriod      TaxPeriod @relation(fields: [taxPeriodId], references: [id])
  totalSales     Decimal   @db.Decimal(12, 2)
  outputVat      Decimal   @db.Decimal(10, 2)
  totalExpenses  Decimal   @db.Decimal(12, 2)
  inputVat       Decimal   @db.Decimal(10, 2)
  netVatPayable  Decimal   @db.Decimal(10, 2)
  status         String    @default("DRAFT") // DRAFT, SUBMITTED
  submittedAt    DateTime?
  createdAt      DateTime  @default(now())
}

// Double-Entry Bookkeeping System
model ChartOfAccounts {
  id          String        @id @default(cuid())
  accountCode String        @unique // e.g., "1001", "4000", "5010"
  accountName String        // e.g., "Cash", "Sales Revenue", "Marketing Expense"
  accountType String        // ASSET, LIABILITY, EQUITY, REVENUE, EXPENSE
  description String?
  isActive    Boolean       @default(true)
  journalLines JournalLine[]
}

model JournalEntry {
  id          String        @id @default(cuid())
  entryDate   DateTime
  description String        // "Sale for Order #1234", "Marketing Expense #567"
  referenceId String        // The ID of the Order, Expense, or Shrinkage record
  referenceType String      // "ORDER", "EXPENSE", "SHRINKAGE"
  isPosted    Boolean       @default(true)
  journalLines JournalLine[]
  createdAt   DateTime      @default(now())
}

model JournalLine {
  id             String          @id @default(cuid())
  journalEntryId String
  journalEntry   JournalEntry    @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)
  accountId      String
  account        ChartOfAccounts @relation(fields: [accountId], references: [id])
  debitAmount    Decimal         @default(0) @db.Decimal(12, 2)
  creditAmount   Decimal         @default(0) @db.Decimal(12, 2)
}